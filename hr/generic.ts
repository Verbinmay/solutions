/**
 * üîπ –ó–∞–¥–∞–Ω–∏–µ:
 * –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è TypeScript Generic, 
 * —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞—Å—Å—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ–±–æ–±—â—ë–Ω–Ω—ã–º–∏ –∏ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö (–æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ).
 * 
 * ‚ùó –í–∞–∂–Ω–æ:
 * - –ü–∏—Å–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∞—Å—Å–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ù–ï –Ω—É–∂–Ω–æ.
 * - –†–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤ —Ç–æ–∂–µ –ù–ï –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å.
 * - –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Generic.
 */

interface SortingMethod<T> {
    sort(array: T[]): T[];
}

class BubbleSort<T> implements SortingMethod<T> {
    sort(array: T[]): T[] {
        return [] as T[];
    }
}

class QuickSort<T> implements SortingMethod<T> {
    sort(array: T[]): T[] {
        return [] as T[];
    }
}

class MergeSort<T> implements SortingMethod<T> {
    sort(array: T[]): T[] {
        return [] as T[];
    }
}

class Sort<T> {
    constructor(
        public array: T[],
        private readonly method: SortingMethod<T>,
    ) { }

    sort(): T[] {
        return this.method.sort(this.array);
    }
}

class SortLimited<T extends number | string> {
    constructor(
        public array: T[],
        private readonly method: SortingMethod<T>,
    ) { }

    sort(): T[] {
        return this.method.sort(this.array);
    }
}



// –ö–û–î –ù–ò–ñ–ï –ú–ï–ù–Ø–¢–¨ –ó–ê–ü–†–ï–©–ï–ù–û!!!:

// –°—É—Ç—å —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–æ–º, —á—Ç–æ –±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö

// –¢–µ—Å—Ç—ã:

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —á–∏—Å–ª–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º
{
    const array: number[] = [5, 2, 9, 1];
    const sorter = new Sort<number>(array, new QuickSort<number>());
    const sortedArray = sorter.sort();
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º
{
    const array: string[] = ['apple', 'orange', 'banana'];
    const sorter = new Sort<string>(array, new MergeSort<string>());
    const sortedArray = sorter.sort();
}

// –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —Ç–∏–ø–æ–º (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
{
    const array: number[] = [1, 2, 3];
    // @ts-expect-error
    const sorter = new Sort<number>(array, new BubbleSort<string>()); // –û—à–∏–±–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏
{
    interface Person {
        name: string;
        age: number;
    }

    const array: Person[] = [
        { name: 'Alice', age: 30 },
        { name: 'Bob', age: 25 },
    ];

    // –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –ø–æ—Ö–æ–∂–µ SortingMethod –∑–∞—á–µ–º-—Ç–æ –Ω—É–∂–µ–Ω... –Ω–æ –∑–∞—á–µ–º?
    class PersonSort implements SortingMethod<Person> {
        sort(array: Person[]): Person[] {
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            return array.sort((a, b) => a.age - b.age);
        }
    }

    const sorter = new Sort<Person>(array, new PersonSort());
    const sortedArray = sorter.sort();
}

// –¢–µ—Å—Ç 5: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ extends
{
    class SortLimited<T extends number | string> {
        // SortingMethod –≤—Å—ë-—Ç–∞–∫–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –Ω–æ –∫–∞–∫–æ–≤ —Å–º—ã—Å–ª, –Ω–µ —Ç–æ–ª—å–∫–æ –∂–µ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö?
        constructor(public array: T[], private method: SortingMethod<T>) { }

        sort(): T[] {
            return this.method.sort(this.array);
        }
    }

    const numberArray = [1, 2, 3];
    const stringArray = ['a', 'b', 'c'];

    const numberSorter = new SortLimited<number>(numberArray, new QuickSort<number>());
    const stringSorter = new SortLimited<string>(stringArray, new MergeSort<string>());

    interface Person {
        name: string;
    }

    const personArray: Person[] = [{ name: 'Charlie' }];
    // @ts-expect-error
    const personSorter = new SortLimited<Person>(personArray, new BubbleSort<Person>()); // –û—à–∏–±–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –º–∞—Å—Å–∏–≤–∞ –∏ –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
{
    const array: number[] = [1, 2, 3];
    // @ts-expect-error
    const sorter = new Sort<number>(array, new MergeSort<string>()); // –û—à–∏–±–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Ç–æ–¥–∞ sort()
{
    const array: number[] = [3, 2, 1];
    const sorter = new Sort<number>(array, new BubbleSort<number>());
    const sortedArray = sorter.sort();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sortedArray –∏–º–µ–µ—Ç —Ç–∏–ø number[]
    function expectNumberArray(input: number[]) { }
    expectNumberArray(sortedArray);
}

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É SortingMethod<T>
{
    class InvalidSortMethod {
        sort(array: number[]): string {
            return 'invalid';
        }
    }

    const array: number[] = [1, 2, 3];
    // @ts-expect-error
    const sorter = new Sort<number>(array, new InvalidSortMethod()); // –û—à–∏–±–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
}

// –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
{
    const array = [1, 'two', 3]; // –ú–∞—Å—Å–∏–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    // @ts-expect-error
    const sorter = new Sort<number>(array, new BubbleSort<number>()); // –û—à–∏–±–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
}

// –¢–µ—Å—Ç 10: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ç–∏–ø–æ–º
{
    const array: number[] = [9, 7, 5];
    const sorter1 = new Sort<number>(array, new BubbleSort<number>());
    const sorter2 = new Sort<number>(array, new QuickSort<number>());
    const sorter3 = new Sort<number>(array, new MergeSort<number>());

    sorter1.sort();
    sorter2.sort();
    sorter3.sort();
}